<!DOCTYPE html>
<html>
  <head>
    <title><%= process.env.npm_package_productName %></title>
    <meta charset="utf-8">
    <style>

      <%= __GLOBAL_STYLES__ %>

      #preload {
        -webkit-app-region: drag;
        align-items: center;
        background: white;
        bottom: 0;
        display: none;
        flex-direction: column;
        justify-content: center;
        left: 0;
        opacity: 1;
        position: fixed;
        right: 0;
        top: 0;
        transition: opacity 0.4s ease-in-out;
        z-index: 100;
      }

      #preload .logo {
        height: 100px;
        width: 100px;
        animation: logo 4s infinite 1s;
        transform-origin: 50% 50%;
      }

      @keyframes logo {
        from, to {
          transform: rotate(0deg);
        }
        10% {
          transform: rotate(0deg);
        }
        30% {
          transform: rotate(360deg);
        }
        40% {
          transform: rotate(360deg);
        }
        60% {
          transform: rotate(720deg);
        }
        70% {
          transform: rotate(720deg);
        }
      }

    </style>
    <script>
      <% if (htmlWebpackPlugin.options.nodeModules) { %>
        require('module').globalPaths.push(
          '<%= htmlWebpackPlugin.options.nodeModules %>'.replace(/\\/g, '\\\\'),
        )
      <% } %>
      require('source-map-support/source-map-support.js').install()
    </script>
  </head>
  <body>
    <div id="preload">
      <img class="logo" src="<%= __DEV__ ? '.' : '../static' %>/images/tmp_logo_will_be_svg_later.png" alt="" />
    </div>
    <div id="app"></div>
    <script>
    const { remote } = require('electron')
const { name } = remote.getCurrentWindow()

const preloadEl = document.getElementById('preload')
const appEl = document.getElementById('app')

const initApp = (options = {}) => {
  return
  const { force = false } = options

  if (force) {
    preloadEl.remove()
  } else {
    preloadEl.style.opacity = 0

    preloadEl.addEventListener('transitionend', () => preloadEl.remove())
  }
}

if (name === 'MainWindow') {
  preloadEl.style.display = 'flex'
  const startTime = Date.now()
  const PRELOAD_WAIT_TIME_MIN = 2000
  window.onAppReady = () => {
    const delay = Math.max(0, PRELOAD_WAIT_TIME_MIN - (Date.now() - startTime))
    setTimeout(initApp, delay)
  }
} else {
  initApp({ force: true })
}
</script>
  </body>
</html>
